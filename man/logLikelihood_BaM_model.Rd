% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inferenceFunk.R
\name{logLikelihood_BaM_model}
\alias{logLikelihood_BaM_model}
\title{BaM log-likelihood}
\usage{
logLikelihood_BaM_model(parvector, X, Yobs, Yu, llfunk, mod, Ysim = NULL)
}
\arguments{
\item{parvector}{numeric vector, parameter vector, including thetas (model parameters)
and gammas (structural errors parameters).}

\item{X}{data frame, model inputs.}

\item{Yobs}{data frame, corresponding observed values.}

\item{Yu}{data frame, measurement uncertainties (standard deviations), same dimensions as Yobs.}

\item{llfunk}{function, function computing the log-likelihood given Ysim, see e.g. ?llfunk_iid_Gaussian}

\item{mod}{model object, the model to be calibrated.}

\item{Ysim}{data frame, model-simulated values. When NULL (default), the model is run to provide simulations.
When a non-NULL data frame is provided, it is used as pre-computed simulations, and the model is
hence not run. This is useful to speed-up some MCMC strategies.}
}
\value{
A list with the following components:
\itemize{
    \item{logLikelihood}{numeric, the log-likelihood.}
    \item{Ysim}{data frame, The model-simulated values.}
}
}
\description{
Log-likelihood engine for a model available through RBaM
}
\examples{
# Rating curve model - see https://github.com/BaM-tools/RBaM
# Parameters of the low flow section control: activation stage k, coefficient a and exponent c
k1=parameter(name='k1',init=-0.5)
a1=parameter(name='a1',init=50)
c1=parameter(name='c1',init=1.5)
# Parameters of the high flow channel control: activation stage k, coefficient a and exponent c
k2=parameter(name='k2',init=1)
a2=parameter(name='a2',init=100)
c2=parameter(name='c2',init=1.67)
# Define control matrix: columns are controls, rows are stage ranges.
controlMatrix=rbind(c(1,0),c(0,1))
# Stitch it all together into a model object
M=model(ID='BaRatin',
        nX=1,nY=1, # number of input/output variables
        par=list(k1,a1,c1,k2,a2,c2), # list of model parameters
        xtra=xtraModelInfo(object=controlMatrix)) # use xtraModelInfo() to pass the control matrix
# Define calibration data
X=SauzeGaugings['H']
Yobs=SauzeGaugings['Q']
Yu=SauzeGaugings['uQ']
# Define the parameter vector (model parameters + structural error parameters)
parvector=c(RBaM::getInitPar(M$par),c(1,0.1))
# Compute log-likelihood
logLikelihood_BaM_model(parvector,M,X,Yobs,Yu,llfunk_iLinear_Gaussian)
}
